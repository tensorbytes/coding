# coding=utf-8
# ----------------
# author: weiyu
# create_time : 5/29/2021
# description : 


# 请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
#
#
#  数字 1-9 在每一行只能出现一次。
#  数字 1-9 在每一列只能出现一次。
#  数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
#
#
#  数独部分空格内已填入了数字，空白格用 '.' 表示。
#
#  注意：
#
#
#  一个有效的数独（部分已被填充）不一定是可解的。
#  只需要根据以上规则，验证已经填入的数字是否有效即可。
#
#
#
#
#  示例 1：
#
#
# 输入：board =
# [["5","3",".",".","7",".",".",".","."]
# ,["6",".",".","1","9","5",".",".","."]
# ,[".","9","8",".",".",".",".","6","."]
# ,["8",".",".",".","6",".",".",".","3"]
# ,["4",".",".","8",".","3",".",".","1"]
# ,["7",".",".",".","2",".",".",".","6"]
# ,[".","6",".",".",".",".","2","8","."]
# ,[".",".",".","4","1","9",".",".","5"]
# ,[".",".",".",".","8",".",".","7","9"]]
# 输出：true
#
#
#  示例 2：
#
#
# 输入：board =
# [["8","3",".",".","7",".",".",".","."]
# ,["6",".",".","1","9","5",".",".","."]
# ,[".","9","8",".",".",".",".","6","."]
# ,["8",".",".",".","6",".",".",".","3"]
# ,["4",".",".","8",".","3",".",".","1"]
# ,["7",".",".",".","2",".",".",".","6"]
# ,[".","6",".",".",".",".","2","8","."]
# ,[".",".",".","4","1","9",".",".","5"]
# ,[".",".",".",".","8",".",".","7","9"]]
# 输出：false
# 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无
# 效的。
#
#
#
#  提示：
#
#
#  board.length == 9
#  board[i].length == 9
#  board[i][j] 是一位数字或者 '.'
#
#  Related Topics 哈希表
#  👍 524 👎 0


# leetcode submit region begin(Prohibit modification and deletion)
import math


class Solution:
    def isValidSudoku(self, board: list) -> bool:

        row_size = len(board)
        col_size = len(board[0])

        row_map = {}
        col_map = {}
        block_map = {}

        for i in range(row_size):
            for j in range(col_size):
                value = board[i][j]
                if value != ".":

                    row_set = row_map.get(i, set())
                    if not row_set:
                        row_map[i] = row_set

                    col_set = col_map.get(j, set())
                    if not col_set:
                        col_map[j] = col_set

                    # 对block的判断
                    b_row_index = math.ceil((i + 1) / 3)
                    b_col_index = math.ceil((j + 1) / 3)
                    block_col_dict = block_map.get(b_row_index, {})
                    if not block_col_dict:
                        block_map[b_row_index] = block_col_dict
                    block_set = block_col_dict.get(b_col_index, set())
                    if not block_set:
                        block_col_dict[b_col_index] = block_set

                    if value in row_set or value in col_set or value in block_set:
                        return False
                    row_set.add(value)
                    col_set.add(value)
                    block_set.add(value)

        return True


if __name__ == '__main__':
    input = [["8", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."],
             [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
             ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
             [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"],
             [".", ".", ".", ".", "8", ".", ".", "7", "9"]]

    input2 = [[".", ".", ".", ".", "5", ".", ".", "1", "."],
              [".", "4", ".", "3", ".", ".", ".", ".", "."],
              [".", ".", ".", ".", ".", "3", ".", ".", "1"],
              ["8", ".", ".", ".", ".", ".", ".", "2", "."],
              [".", ".", "2", ".", "7", ".", ".", ".", "."],
              [".", "1", "5", ".", ".", ".", ".", ".", "."],
              [".", ".", ".", ".", ".", "2", ".", ".", "."],
              [".", "2", ".", "9", ".", ".", ".", ".", "."],
              [".", ".", "4", ".", ".", ".", ".", ".", "."]]

    obj = Solution()
    print(obj.isValidSudoku(input))


    print(obj.isValidSudoku(input2))
